@startuml
title WarmHouse Container Diagram

top to bottom direction

!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

Container_Boundary(device_service, "Device Service"){
    Component(api_controller_ds, "API-controller")
    Component(prometheus_exp_ds, "Prometheus exporter")
    Component(repository_ds, "Repository")
    Component(producer_ds, "Producer")
    Component(logic_ds, "Logic")
}
Rel(api_controller_ds, prometheus_exp_ds, "Service metics")
Rel(api_controller_ds, logic_ds, "Processing")
Rel(logic_ds, repository_ds, "Data")
Rel(logic_ds, producer_ds, "Send message")

Container_Boundary(user_service, "User Service"){
    Component(api_controller_us, "API-controller")
    Component(prometheus_exp_us, "Prometheus exporter")
    Component(repository_us, "Repository")
    Component(producer_us, "Producer")
    Component(logic_us, "Logic")
}
Rel(api_controller_us, prometheus_exp_us, "Service metics")
Rel(api_controller_us, logic_us, "Processing")
Rel(logic_us, repository_us, "Data")
Rel(logic_us, producer_us, "Send message")

Container_Boundary('auth_service', "Authorization service"){
    Component(api_controller_as, "API-controller")
    Component(prometheus_exp_as, "Prometheus exporter")
    Component(repository_as, "Repository")
    Component(producer_as, "Producer")
    Component(logic_as, "Logic")
}
Rel(api_controller_as, prometheus_exp_as, "Service metics")
Rel(api_controller_as, logic_as, "Processing")
Rel(logic_as, repository_as, "Data")
Rel(logic_as, producer_as, "Send message")

Container_Boundary('consumer_connector', "Consumer connector"){
    Component(api_controller_cc, "API-controller")
    Component(prometheus_exp_cc, "Prometheus exporter")
    Component(repository_cc, "Repository")
    Component(consumer_cc, "Consumer")
    Component(logic_cc, "Logic")
}
Rel(api_controller_cc, prometheus_exp_cc, "Service metics")
Rel(api_controller_cc, logic_cc, "Processing")
Rel(logic_cc, repository_cc, "Write data")
Rel(consumer_cc, logic_cc, "Get message")

Container_Boundary('producer_connector', "Producer connector"){
    Component(api_controller_pc, "API-controller")
    Component(prometheus_exp_pc, "Prometheus exporter")
    Component(producer_pc, "Producer")
    Component(logic_pc, "Logic")
}
Rel(api_controller_pc, prometheus_exp_pc, "Service metics")
Rel(api_controller_pc, logic_pc, "Processing")
Rel(logic_pc, producer_pc, "Write message")

Container_Boundary('control_service', "Control service"){
    Component(api_controller_cs, "API-controller")
    Component(prometheus_exp_cs, "Prometheus exporter")
    Component(repository_cs, "Repository")
    Component(producer_cs, "Producer")
    Component(logic_cs, "Logic")
}
Rel(api_controller_cs, prometheus_exp_cs, "Service metics")
Rel(api_controller_cs, logic_cs, "Processing")
Rel(logic_cs, repository_cs, "Data")
Rel(logic_cs, producer_cs, "Send message")

Container_Boundary('telemetry_service', "Telemetry service"){
    Component(api_controller_ts, "API-controller")
    Component(prometheus_exp_ts, "Prometheus exporter")
    Component(repository_ts, "Repository")
    Component(producer_ts, "Producer")
    Component(logic_ts, "Logic")
}
Rel(api_controller_ts, prometheus_exp_ts, "Service metics")
Rel(api_controller_ts, logic_ts, "Processing")
Rel(logic_ts, repository_ts, "Data")
Rel(logic_ts, producer_ts, "Send message")

Container_Boundary('notification_service', "Notification service"){
    Component(api_controller_ns, "API-controller")
    Component(prometheus_exp_ns, "Prometheus exporter")
    Component(consumer_ns, "Consumer")
    Component(logic_ns, "Logic")
    Component(adapter_ns, "Adapter")
}
Rel(api_controller_ns, prometheus_exp_ns, "Service metics")
Rel(consumer_ns, logic_ns, "Message")
Rel(logic_ns, adapter_ns, "Notification")

ComponentDb(ds_db, "PostgreSQL")
ComponentDb(as_db, "PostgreSQL")
ComponentDb(ts_db, "OpenSearch")
ComponentDb(us_db, "PostgreSQL")
ComponentDb(cs_db, "PostgreSQL")

Component(telemetry_topic, "Telemetry topic")
Component(notification_topic, "Notification topic")
Rel(producer_pc, telemetry_topic, "Write telemetry")
Rel(consumer_cc, telemetry_topic, "Get telemetry")
Rel(consumer_ns, notification_topic, "Get notifications")
Rel(producer_ds, notification_topic, "Write notifications")
Rel(producer_us, notification_topic, "Write notifications")
Rel(producer_as, notification_topic, "Write notifications")
Rel(producer_cs, notification_topic, "Write notifications")
Rel(producer_ts, notification_topic, "Write notifications")

Rel(repository_ts, ts_db, "Get telemetry")
Rel(repository_cc, ts_db, "Write telemetry")
Rel(repository_cs, cs_db, "Read/Write")
Rel(repository_as, as_db, "Read/Write")
Rel(repository_us, us_db, "Read/Write")
Rel(repository_ds, ds_db, "Read/Write")
@enduml